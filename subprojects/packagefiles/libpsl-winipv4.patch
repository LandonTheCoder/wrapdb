From ce6a2985b3211a7b04077a7caefaf36814f9c02e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim=20R=C3=BChsen?= <tim.ruehsen@gmx.de>
Date: Sat, 20 Jan 2024 18:36:26 +0100
Subject: [PATCH 1/2] Implement is_ip4() and is_ip6() to avoid network
 dependencies.

---
 configure.ac |  13 ------
 src/psl.c    | 109 +++++++++++++++++++++++++++++++++++++--------------
 2 files changed, 79 insertions(+), 43 deletions(-)

diff --git a/configure.ac b/configure.ac
index 330acc8..d854988 100644
--- a/configure.ac
+++ b/configure.ac
@@ -299,19 +299,6 @@ elif test -n "$NEEDS_SOCKET" ; then
   LIBS="$LIBS -lsocket"
 elif test -n "$NEEDS_NSL" ; then
   LIBS="$LIBS -lnsl"
-else
-  # Platform dependant options
-  case "${host_os}" in
-    # MinGW / Windows
-    *mingw*)
-      # Select Windows NT/2000 and later, for WSAStringToAddressW()
-      CPPFLAGS="$CPPFLAGS -D_WIN32_WINNT=0x500"
-      # Needed for network support
-      LIBS="$LIBS -lws2_32"
-      ;;
-    *)
-      ;;
-  esac
 fi
 
 # Check for clock_gettime() used for performance measurement
diff --git a/src/psl.c b/src/psl.c
index fa6bfd4..b3d7225 100644
--- a/src/psl.c
+++ b/src/psl.c
@@ -41,15 +41,6 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 
-#ifdef _WIN32
-# include <winsock2.h>
-# include <ws2tcpip.h>
-#else
-# include <sys/socket.h>
-# include <netinet/in.h>
-# include <unistd.h>
-#endif
-
 #if defined(_MSC_VER) && ! defined(ssize_t)
 # include <basetsd.h>
 typedef SSIZE_T ssize_t;
@@ -67,10 +58,8 @@ typedef SSIZE_T ssize_t;
 # include <langinfo.h>
 #endif
 
-#ifndef _WIN32
-# include <arpa/inet.h>
-#else
-# include <malloc.h>
+#ifdef _WIN32
+#	include <malloc.h>
 #endif
 
 #ifdef WITH_LIBICU
@@ -1579,30 +1568,90 @@ int psl_check_version_number(int version)
 
 	return PSL_VERSION_NUMBER;
 }
+/*
+ * Return true if 'src' is a valid dotted quad, else false.
+ * Assume that characters '0'..'9' have consecutive byte values.
+ * credit:
+ *	  inspired by Paul Vixie
+ */
+static int is_ip4(const char *s)
+{
+	int i, n;
+	unsigned char c;
 
-/* return whether hostname is an IP address or not */
-static int isip(const char *hostname)
+	for (i = 0; i < 4; i++) {
+		if (!(c = *s++) || c < '0' || c > '9')
+			return 0;
+
+		n = c - '0';
+		if ((c = *s++) && c >= '0' && c <= '9') {
+			n = n * 10 + c - '0';
+			if ((c = *s++) && c >= '0' && c <= '9') {
+				n = n * 10 + c - '0';
+				if ((c = *s++) && c >= '0' && c <= '9') {
+					n = n * 10 + c - '0';
+					c = *s++;
+				}
+			}
+		}
+
+		if (n > 255)
+			return 0;
+
+		if (i < 3 && c != '.')
+			return 0;
+	}
+
+	return !c;
+}
+
+static int hexval(unsigned c)
 {
-#ifdef _WIN32
-	WCHAR wName[INET6_ADDRSTRLEN+1];
+	if (c - '0' < 10) return c - '0';
+	c |= 32;
+	if (c - 'a' < 6) return c - 'a' + 10;
+	return -1;
+}
 
-	struct sockaddr_in  addr  = {0};
-	struct sockaddr_in6 addr6 = {0};
+/*
+ * Original code taken from musl inet_pton(),
+ *   which has a standard MIT license (https://git.musl-libc.org/cgit/musl/tree/COPYRIGHT).
+ * Amended and simplified to out needs.
+ */
+static int is_ip6(const char *s)
+{
+	int i, j, n, d, brk = -1, need_v4 = 0;
 
-	INT size  = sizeof(addr);
-	INT size6 = sizeof(addr6);
+	if (*s == ':' && *++s != ':') return 0;
 
-	if (!MultiByteToWideChar(CP_UTF8, 0, hostname, -1, wName, countof(wName)))
-		return 0;
+	for (i = 0; ; i++) {
+		if (s[0] == ':' && brk < 0) {
+			brk = i;
+			if (!*++s) break;
+			continue;
+		}
+		for (n = j = 0; j < 4 && (d = hexval(s[j])) >= 0; j++)
+			n = n * 16 + d;
+		if (j == 0) return 0;
+		if (!s[j] && (brk >= 0 || i == 7)) break;
+		if (i == 7) return 0;
+		if (s[j] != ':') {
+			if (s[j] != '.' || (i < 6 && brk < 0)) return 0;
+			need_v4 = 1;
+			i++;
+			break;
+		}
+		s += j + 1;
+	}
 
-	return (WSAStringToAddressW(wName, AF_INET,  NULL, (struct sockaddr *)&addr,  &size) != SOCKET_ERROR) |
-	       (WSAStringToAddressW(wName, AF_INET6, NULL, (struct sockaddr *)&addr6, &size6) != SOCKET_ERROR);
-#else
-	struct in_addr addr;
-	struct in6_addr addr6;
+	if (need_v4 && !is_ip4(s)) return 0;
+	return 1;
+}
 
-	return inet_pton(AF_INET, hostname, &addr) || inet_pton(AF_INET6, hostname, &addr6);
-#endif
+/* return whether hostname is an IP address or not */
+static int isip(const char *hostname)
+{
+	return is_ip4(hostname) || is_ip6(hostname);
 }
 
 /**

From 7d770638d2a23487ac30c8e55d73a280027a3208 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Tim=20R=C3=BChsen?= <tim.ruehsen@gmx.de>
Date: Sun, 4 Feb 2024 18:38:34 +0100
Subject: [PATCH 2/2] Get rid of Windows WSA startup code

Reported-by: @vszakats (github.com)
---
 src/psl.c                                |  7 +++++++
 tests/test-is-cookie-domain-acceptable.c | 16 ----------------
 tools/psl.c                              | 21 +--------------------
 3 files changed, 8 insertions(+), 36 deletions(-)

diff --git a/src/psl.c b/src/psl.c
index b3d7225..3f254bc 100644
--- a/src/psl.c
+++ b/src/psl.c
@@ -41,6 +41,13 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 
+#if defined(_WIN32) && (defined(WITH_LIBIDN2) || defined(WITH_LIBIDN))
+# ifndef WIN32_LEAN_AND_MEAN
+# define WIN32_LEAN_AND_MEAN
+# endif
+# include <windows.h> /* for GetACP() */
+#endif
+
 #if defined(_MSC_VER) && ! defined(ssize_t)
 # include <basetsd.h>
 typedef SSIZE_T ssize_t;
diff --git a/tests/test-is-cookie-domain-acceptable.c b/tests/test-is-cookie-domain-acceptable.c
index f7f833d..7bf4f11 100644
--- a/tests/test-is-cookie-domain-acceptable.c
+++ b/tests/test-is-cookie-domain-acceptable.c
@@ -32,10 +32,6 @@
 # include <config.h>
 #endif
 
-#ifdef _WIN32
-# include <winsock2.h> // WSAStartup, WSACleanup
-#endif
-
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -111,18 +107,6 @@ static void test_psl(void)
 
 int main(int argc, const char * const *argv)
 {
-#ifdef _WIN32
-	WSADATA wsa_data;
-	int err;
-
-	if ((err = WSAStartup(MAKEWORD(2,2), &wsa_data))) {
-		printf("WSAStartup failed with error: %d\n", err);
-		return 1;
-	}
-
-	atexit((void (__cdecl*)(void)) WSACleanup);
-#endif
-
 	/* if VALGRIND testing is enabled, we have to call ourselves with valgrind checking */
 	if (argc == 1) {
 		const char *valgrind = getenv("TESTS_VALGRIND");
diff --git a/tools/psl.c b/tools/psl.c
index 527d780..5b34013 100644
--- a/tools/psl.c
+++ b/tools/psl.c
@@ -37,8 +37,6 @@
 #endif
 
 #ifdef _WIN32
-# include <winsock2.h> // WSAStartup, WSACleanup
-
 // Windows does not have localtime_r but has localtime_s, which is more or less
 // the same except that the arguments are reversed
 # define LOCALTIME_R_SUCCESSFUL(t_sec,t_now)	\
@@ -52,6 +50,7 @@
 #include <string.h>
 #include <ctype.h>
 #include <locale.h>
+#include <time.h>
 
 #include <libpsl.h>
 
@@ -78,20 +77,6 @@ static void usage(int err, FILE* f)
 	exit(err);
 }
 
-static void init_windows(void) {
-#ifdef _WIN32
-	WSADATA wsa_data;
-	int err;
-
-	if ((err = WSAStartup(MAKEWORD(2,2), &wsa_data))) {
-		printf("WSAStartup failed with error: %d\n", err);
-		exit(EXIT_FAILURE);
-	}
-
-	atexit((void (__cdecl*)(void)) WSACleanup);
-#endif
-}
-
 /* RFC 2822-compliant date format */
 static const char *time2str(time_t t)
 {
@@ -238,8 +223,6 @@ int main(int argc, const char *const *argv)
 				else if (mode == 4) {
 					char *cookie_domain_lower;
 
-					init_windows();
-
 					if ((rc = psl_str_to_utf8lower(domain, NULL, NULL, &cookie_domain_lower)) == PSL_SUCCESS) {
 						if (!batch_mode)
 							printf("%s: ", domain);
@@ -284,8 +267,6 @@ int main(int argc, const char *const *argv)
 		}
 	}
 	else if (mode == 4) {
-		init_windows();
-
 		for (; arg < argv + argc; arg++) {
 			if (!batch_mode)
 				printf("%s: ", *arg);
